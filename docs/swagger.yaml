openapi: "3.0.0"
info:
  title: Python Web Service Demo
  description: |
    A simple demonstration web service app with Python and Flask.<br/>
    Source code at GitHub: <https://github.com/cc-wong/python-webservice-demo>
    
    Hosting of this API documentation on GitHub Pages was made possible by
    [Peter Evan's guide at swagger-github-pages](https://github.com/peter-evans/swagger-github-pages).
  version: "2.0.0"
servers:
  - url: https://python-webservice-demo.onrender.com
    description: "On Render (latest release)"
tags:
- name: "SimpleText"
  description: "Operations that return a simple text message."
- name: "Calculation"
  description: "Operations that perform calculations on values."
- name: "GetData"
  description: "Operations that lookup/populate a set of data."
- name: "Maintenance"
  description: "Operations related to webservice maintenance."
paths:
  /:
    get:
      tags:
      - "SimpleText"
      description: Prints a simple "Hello World" message.
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
                example: <h1>Hello World!</h1>
  /greeting/{name}:
    get:
      tags:
      - "SimpleText"
      description: Prints a personalized greeting with the name provided by `{name}`.
      parameters:
        - name: name
          in: path
          required: true
          description: The name to be used for the greeting.
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: Hello, Lulu!
  /getWorkers:
    post:
      tags:
      - "GetData"
      description: |
        Returns the list of workers configured in `data/worker_list.json`. \
        \
        If a non-empty list of day-of-week is passed in the request parameters,
        the list will include only workers whose work days include all of the defined days-of-week. \
        Accepted values: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY \
        \
        Otherwise, the whole list will be returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                work_days:
                  description: This function will return workers whose work days include every entry in this list.
                  type: array
                  items:
                    type: string
            examples:
              1 - Multiple days of a week:
                value:
                  work_days: [ MONDAY, TUESDAY ]
              2 - A single day of a week:
                value:
                  work_days: [ SUNDAY ]
              3 - Empty list:
                value:
                  work_days: []
              4 - Empty JSON:
                value: {}
              5 - Invalid value:
                value:
                  work_days: [ MONDAY, INVALID ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  workers:
                    description: List of workers
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          description: Full name
                          type: string
                        sex:
                          description: Sex (M/F)
                          type: string
                        is_reg_member:
                          description: Is registered member?
                          type: boolean
                        age:
                          description: Worker's age
                          type: integer
                        work_days:
                          description: Worker's work days in a week
                          type: array
                          items:
                            type: string
              example:
                workers:
                  - name: Chan Tai Man
                    sex: M
                    is_reg_member: true
                    age: 56
                    work_days: [ MONDAY, TUESDAY, WEDNESDAY ]
                  - name: Ma Siu Ling
                    sex: F
                    is_reg_member: false
                    age: 44
                    work_days: [ FRIDAY ]
        400:
          description: |
            Bad request. The request parameter `work_days` includes an invalid value.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The HTTP status code
                    type: integer
                    example: 400
                  message:
                    description: The error message
                    type: string
                    example: "Invalid value for parameter work_days!"
  /timestwo:
    post:
      tags:
      - "Calculation"
      description: Multiplies a given number by 2.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                num:
                  type: integer
                  example: 3
              required:
                - num
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  num:
                    type: integer
                    example: 3
                  result:
                    type: integer
                    example: 6
        400:
          description: |
            Bad request. `num` must exist in the request parameters and its value must be an integer. \
            See the message returned in the response data for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The HTTP status code
                    type: integer
                    example: 400
                  message:
                    description: The error message
                    type: string
                    example: "'num' must be an integer."
  /calculateDate:
    post:
      tags:
      - "Calculation"
      description: Calculates a specific number of weeks before/after a given date.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  description: |
                    The given date to calculate from.<br/>
                    Format: YYYY-MM-DD
                  type: string
                weeks:
                  description: |
                    The number of weeks to calculate. \
                    Use a negative number to calculate past dates.
                  type: integer
            examples:
              1 - Calculate future date:
                value:
                  date: "2024-05-27"
                  weeks: 10
              2 - Calculate past date:
                value:
                  date: "2024-03-24"
                  weeks: -2
              3 - Incorrect 'date' format:
                value:
                  date: "2024/99/6662"
                  weeks: 10
              4 - Incorrect 'weeks' format:
                value:
                  date: "2024-03-24"
                  weeks: asdf
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    description: |
                      The calculated date.<br/>
                      Format: YYYY-MM-DD
                    type: string
                    example: "2024-08-05"
        400:
          description: | 
            Bad request. It normally means that there is a problem in the request data. \
            See the message in the response data for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The HTTP status code
                    type: integer
                    example: 400
                  message:
                    description: The error message
                    type: string
                    example: "'weeks' must be an integer!"
  /getSumoHonbashoSchedule:
    get:
      tags:
      - "GetData"
      description: |
        Determines the schedule of the Ozumo Honbasho (Grand Sumo Tournament)
        for a given year.

        The tournaments are scheduled as follows:
        1. 6 (six) tournaments are held every year, in odd-number months.
        2. A tournament starts on the 2nd Sunday of a month and
          lasts for 15 (fifteen) consecutive days.
          Therefore the last day of a tournament will be on the 4th Sunday of the month.

        _**NOTE:** This service was designed to estimate the schedule of future years.\
        The dates returned for past years may or may not reflect the actual schedule,
        eg. the March and May tournaments in 2020 were cancelled and/or postponed
        but the schedule returned by this service will not reflect that._
      parameters:
        - in: query
          name: year
          description: |
            The year to determine the tournament schedule for. \
            Must be between 2012 to `datetime.MAXYEAR`
            (see [its definition in the Python documentation](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR)).
          schema:
            type: integer
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        basho:
                          description: |
                            Tournament name.<br/>
                            Possible values: HATSU, HARU, NATSU, NAGOYA, AKI, KYUSHU
                          type: string
                        month:
                          description: Number representing the month of the tournament.
                          type: integer
                        month_name:
                          description: Month name of the tournament.
                          type: string
                        dates:
                          description: Tournament dates in chronical order.
                          type: array
                          items:
                            type: string
                            description: "Format: YYYY-MM-DD"
              example:
                result:
                  - basho: Hatsu
                    month: 1
                    month_name: January
                    dates: [ '2024-01-14', '2024-01-15', '2024-01-16' ]
                  - basho: Haru
                    month: 3
                    month_name: March
                    dates: [ '2024-03-10', '2024-03-11', '2024-03-12' ]
        400:
          description: |
            Bad request. The parameter `year` is either absent, not a valid year number,
            or outside the allowed value range. \
            See the message returned in the response data for details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    description: The HTTP status code
                    type: integer
                    example: 400
                  message:
                    description: The error message
                    type: string
                    example: "Request argument 'year' must be an integer!"
  /healthcheck:
    get:
      tags:
      - "Maintenance"
      description: Endpoint for healthcheck.
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
    head:
      tags:
      - "Maintenance"
      description: |
        Endpoint for healthcheck. May also be used as a keepalive service.\
        \
        Same as the `GET` request but skips the response body.
      responses:
        200:
          description: OK
